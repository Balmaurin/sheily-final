#!/usr/bin/env python3
"""
RETRENAMIENTO COMPLETO DE TODAS LAS RAMAS
Script maestro para correcci√≥n completa del proyecto
"""

import json
import os
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

# Agregar directorio padre al path para importar m√≥dulos locales
sys.path.append(str(Path(__file__).parent.parent))

from sheily_train.core.validation.advanced_validation import (
    generate_validation_report,
    validate_adapter_comprehensive,
    validate_all_adapters,
)
from sheily_train.core.validation.validate_adapter import validate_adapter

# Todas las ramas a procesar
ALL_BRANCHES = [
    "antropologia",
    "economia",
    "psicologia",
    "historia",
    "quimica",
    "biologia",
    "filosofia",
    "sociologia",
    "politica",
    "ecologia",
    "educacion",
    "arte",
    "informatica",
    "ciberseguridad",
    "linguistica",
    "tecnologia",
    "derecho",
    "musica",
    "cine",
    "literatura",
    "ingenieria",
    "antropologia_digital",
    "economia_global",
    "filosofia_moderna",
    "marketing",
    "derecho_internacional",
    "psicologia_social",
    "fisica_cuantica",
    "astronomia",
    "IA_multimodal",
    "voz_emocional",
    "metacognicion",
]


def log_session(session_data):
    """Registrar sesi√≥n de entrenamiento"""
    log_file = Path("models/lora_adapters/logs/master_training_log.jsonl")
    log_file.parent.mkdir(exist_ok=True)

    with open(log_file, "a", encoding="utf-8") as f:
        f.write(json.dumps(session_data) + "\n")


def validate_environment():
    """Validar entorno completo"""
    print("üîç VALIDANDO ENTORNO...")

    checks = [
        ("Modelo base", Path("models/gguf/llama-3.2.gguf")),
        ("Corpus", Path("corpus_ES")),
        ("Script entrenamiento", Path("sheily_train/core/training/training_pipeline.py")),
        ("Script validaci√≥n", Path("sheily_train/core/validation/validate_adapter.py")),
    ]

    for name, path in checks:
        if path.exists():
            print(f"‚úÖ {name}: OK")
        else:
            print(f"‚ùå {name}: FALTA")
            return False

    print("‚úÖ Entorno validado completamente")
    return True


def process_all_branches():
    """Procesar todas las ramas"""
    if not validate_environment():
        print("‚ùå Entorno inv√°lido")
        return False

    results = {"total": len(ALL_BRANCHES), "successful": 0, "failed": 0, "sessions": []}

    print(f"üöÄ INICIANDO RETRENAMIENTO COMPLETO")
    print(f"üìã Ramas a procesar: {results['total']}")

    for i, branch in enumerate(ALL_BRANCHES, 1):
        print(f"\nüìç Progreso: {i}/{results['total']}")
        print(f"üéØ Procesando: {branch}")

        start_time = time.time()

        # Ejecutar pipeline
        cmd = [
            sys.executable,
            "sheily_train/core/training/training_pipeline.py",
            branch,
            "corpus_ES",
            f"models/lora_adapters/retraining/{branch}",
        ]

        try:
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=3600)
            processing_time = time.time() - start_time

            if result.returncode == 0:
                results["successful"] += 1
                status = "SUCCESS"
                print("‚úÖ Completado exitosamente")
            else:
                results["failed"] += 1
                status = "FAILED"
                print(f"‚ùå Fallido: {result.stderr.strip()}")

            # Registrar sesi√≥n
            session_data = {
                "timestamp": datetime.now().isoformat(),
                "branch": branch,
                "status": status,
                "processing_time": processing_time,
                "return_code": result.returncode,
            }
            results["sessions"].append(session_data)
            log_session(session_data)

        except subprocess.TimeoutExpired:
            results["failed"] += 1
            print("‚è∞ Timeout")
            session_data = {
                "timestamp": datetime.now().isoformat(),
                "branch": branch,
                "status": "TIMEOUT",
                "processing_time": time.time() - start_time,
            }
            log_session(session_data)

        except Exception as e:
            results["failed"] += 1
            print(f"‚ùå Error: {e}")
            session_data = {
                "timestamp": datetime.now().isoformat(),
                "branch": branch,
                "status": "ERROR",
                "error": str(e),
            }
            log_session(session_data)

        # Pausa entre ramas
        if i < results["total"]:
            print("‚è≥ Pausa breve...")
            time.sleep(5)

    return results


def generate_final_report(results):
    """Generar reporte final"""
    print("\n" + "=" * 60)
    print("üìä REPORTE FINAL DE CORRECCI√ìN")
    print("=" * 60)

    print(f"‚úÖ Exitosos: {results['successful']}")
    print(f"‚ùå Fallidos: {results['failed']}")
    print(f"üìà Tasa de √©xito: {results['successful']/results['total']*100:.1f}%")

    # Guardar reporte detallado
    report = {
        "timestamp": datetime.now().isoformat(),
        "summary": {
            "total_branches": results["total"],
            "successful": results["successful"],
            "failed": results["failed"],
            "success_rate": results["successful"] / results["total"] * 100,
        },
        "sessions": results["sessions"],
    }

    with open("audit_2024/reports/final_correction_report.json", "w", encoding="utf-8") as f:
        json.dump(report, f, indent=2, ensure_ascii=False)

    print("\n‚úÖ Reporte guardado: audit_2024/reports/final_correction_report.json")

    if results["successful"] / results["total"] >= 0.95:
        print("üéâ CORRECCI√ìN COMPLETA EXITOSA")
        return True
    else:
        print("‚ö†Ô∏è CORRECCI√ìN PARCIAL - REQUIERE REVISI√ìN")
        return False


def main():
    """Funci√≥n principal"""
    print("üî• CORRECCI√ìN COMPLETA DEL PROYECTO SHEILY")
    print("=" * 60)

    # Procesar todas las ramas
    results = process_all_branches()

    # Si el entorno es inv√°lido, no generar reporte
    if results is False:
        print("‚ùå No se puede continuar con entorno inv√°lido")
        return 1

    # Generar reporte final
    success = generate_final_report(results)

    return 0 if success else 1


if __name__ == "__main__":
    exit(main())
