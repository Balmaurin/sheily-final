name: 🌙 Nightly Build & Extended Tests

on:
  schedule:
    # Ejecutar todos los días a las 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Permitir ejecución manual

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ===============================
  # TESTING EXTENDIDO NOCTURNO
  # ===============================
  extended-tests:
    name: 🧪 Extended Test Suite
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-cov pytest-xdist pytest-timeout

    - name: 🧪 Run All Tests (Including Slow)
      run: |
        pytest tests/ -v --cov=sheily_core --cov=sheily_train \
               --cov-report=xml --cov-report=html \
               --timeout=300 --slow \
               -n auto  # Parallel execution

    - name: 🔍 Extended Security Scan
      run: |
        bandit -r . -f json -o bandit-extended.json || true
        safety check --json --output safety-extended.json || true

    - name: 📊 Upload Extended Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: nightly-test-reports
        path: |
          htmlcov/
          coverage.xml
          bandit-extended.json
          safety-extended.json

  # ===============================
  # ANÁLISIS DE CALIDAD PROFUNDO
  # ===============================
  quality-analysis:
    name: 📊 Deep Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Analysis Tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install radon xenon mccabe vulture pyflakes

    - name: 📈 Complexity Analysis (Radon)
      run: |
        radon cc sheily_core sheily_train --json -o complexity.json
        radon mi sheily_core sheily_train --json -o maintainability.json

    - name: 🔍 Dead Code Detection (Vulture)
      run: |
        vulture sheily_core sheily_train --json > dead_code.json || true

    - name: ⚠️ Code Issues (PyFlakes)
      run: |
        pyflakes sheily_core sheily_train > pyflakes.txt || true

    - name: 📊 Upload Quality Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-analysis-reports
        path: |
          complexity.json
          maintainability.json
          dead_code.json
          pyflakes.txt

  # ===============================
  # TESTING DE COMPATIBILIDAD
  # ===============================
  compatibility-test:
    name: 🔄 Compatibility Testing
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, windows-2019, windows-2022, macos-11, macos-12]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: 🧪 Run Compatibility Tests
      run: |
        pytest tests/unit/ -v --tb=short -x  # Stop on first failure
      continue-on-error: true

    - name: 📋 Report Compatibility
      run: |
        echo "OS: ${{ matrix.os }}"
        echo "Python: ${{ matrix.python-version }}"
        echo "Status: ${{ job.status }}"

  # ===============================
  # BENCHMARK Y RENDIMIENTO
  # ===============================
  performance-benchmark:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Benchmark Tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler psutil

    - name: ⚡ Run Performance Benchmarks
      run: |
        python -c "
        import psutil
        import time

        # System info
        print(f'CPU Count: {psutil.cpu_count()}')
        print(f'Memory: {psutil.virtual_memory().total / 1024**3:.2f} GB')

        # Basic performance test
        start = time.time()
        # Simular carga de trabajo
        for i in range(1000000):
            pass
        end = time.time()
        print(f'Basic loop benchmark: {end - start:.4f} seconds')
        "

    - name: 📊 Memory Usage Analysis
      run: |
        python -c "
        import psutil
        import sys
        import gc

        # Memory analysis
        process = psutil.Process()
        print(f'Memory usage: {process.memory_info().rss / 1024**2:.2f} MB')
        print(f'CPU usage: {process.cpu_percent()}%')

        # Garbage collection stats
        print(f'GC stats: {gc.get_stats()}')
        "

  # ===============================
  # DOCUMENTACIÓN Y REPORTES
  # ===============================
  documentation-check:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Documentation Tools
      run: |
        python -m pip install --upgrade pip
        pip install sphinx pydocstyle doc8 markdown-link-check

    - name: 📖 Check Docstring Style
      run: |
        pydocstyle sheily_core sheily_train --json-output > docstring_report.json || true

    - name: 📝 Validate Markdown Files
      run: |
        find . -name "*.md" -exec markdown-link-check {} \; > markdown_check.txt || true

    - name: 📊 Upload Documentation Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation-reports
        path: |
          docstring_report.json
          markdown_check.txt

  # ===============================
  # NOTIFICACIÓN FINAL
  # ===============================
  nightly-summary:
    name: 📊 Nightly Build Summary
    runs-on: ubuntu-latest
    needs: [extended-tests, quality-analysis, compatibility-test, performance-benchmark, documentation-check]
    if: always()

    steps:
    - name: 📋 Generate Summary
      run: |
        echo "🌙 NIGHTLY BUILD SUMMARY"
        echo "======================="
        echo "Extended Tests: ${{ needs.extended-tests.result }}"
        echo "Quality Analysis: ${{ needs.quality-analysis.result }}"
        echo "Compatibility: ${{ needs.compatibility-test.result }}"
        echo "Performance: ${{ needs.performance-benchmark.result }}"
        echo "Documentation: ${{ needs.documentation-check.result }}"
        echo "======================="

        if [[ "${{ needs.extended-tests.result }}" == "success" &&
              "${{ needs.quality-analysis.result }}" == "success" ]]; then
          echo "✅ Nightly build PASSED"
        else
          echo "❌ Nightly build had ISSUES"
        fi
