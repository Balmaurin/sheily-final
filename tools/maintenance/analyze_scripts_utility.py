#!/usr/bin/env python3
"""
ANALYZE SCRIPTS UTILITY - Para proyecto EN MARCHA
==================================================
Determina qu√© scripts son √∫tiles ahora vs obsoletos/legacy
"""

from pathlib import Path
import sys

PROJECT_ROOT = Path(__file__).parent.parent.parent
SCRIPTS_DIR = PROJECT_ROOT / "scripts"

def categorize_by_current_utility():
    """Categorizar por utilidad ACTUAL"""
    
    categories = {
        "√öTILES_DIARIO": {
            "desc": "Scripts que S√ç usar√≠as regularmente",
            "scripts": [
                ("activate_sheily.sh", "Activar entorno - √∫til si trabajas con venv"),
                ("ci_pipeline.sh", "Pipeline CI/CD - √∫til para validar antes de commits"),
                ("pre-commit", "Hook de git - validaci√≥n autom√°tica"),
                ("quality_gate_local.sh", "Validar calidad antes de push"),
            ]
        },
        "√öTILES_OCASIONAL": {
            "desc": "Scripts √∫tiles de vez en cuando",
            "scripts": [
                ("audit_quick.py", "Auditor√≠a r√°pida del c√≥digo"),
                ("quality_dashboard.py", "Dashboard de calidad del proyecto"),
                ("security_remediation.sh", "Remediaci√≥n de seguridad"),
                ("validate_structure.py", "Validar estructura del proyecto"),
                ("workspace_cleanup.sh", "Limpiar workspace"),
            ]
        },
        "SETUP_INICIAL": {
            "desc": "Solo para setup inicial - YA NO NECESARIOS",
            "scripts": [
                ("initialize_ultra_fast.py", "Inicializaci√≥n - YA HECHO"),
                ("setup_ultra_fast.py", "Setup - YA HECHO"),
                ("setup_llama_3_2_1b_q4.sh", "Setup LLM - YA HECHO si usas LLM"),
            ]
        },
        "TESTING": {
            "desc": "Scripts de testing - √∫tiles para QA",
            "scripts": [
                ("test_api.py", "Test API - √∫til si tienes API"),
                ("test_local_llm_api.py", "Test LLM - √∫til si usas LLM local"),
                ("test_quick_web_system.sh", "Test web r√°pido"),
                ("test_sheily_web_system.sh", "Test web completo"),
                ("test_ultra_fast.py", "Test sistema ultra fast"),
            ]
        },
        "LEGACY_ELIMINAR": {
            "desc": "Scripts OBSOLETOS - ELIMINAR",
            "scripts": [
                ("cline_tasks.sh", "Legacy Cline - YA NO SE USA"),
                ("migrate_from_cline_workflows.sh", "Migraci√≥n Cline - YA NO SE USA"),
            ]
        },
        "DESARROLLO_AVANZADO": {
            "desc": "Features avanzadas - opcional",
            "scripts": [
                ("advanced_ml_features.py", "Features ML avanzadas - solo si desarrollas ML"),
                ("advanced_optimization.py", "Optimizaciones avanzadas - solo si optimizas"),
                ("analyze_dead_code.py", "An√°lisis c√≥digo muerto - mantenimiento"),
                ("apply_code_standards.sh", "Aplicar est√°ndares - mantenimiento"),
                ("enterprise_blue_green_deployment.py", "Deployment enterprise - solo en producci√≥n"),
            ]
        },
        "SERVIDORES": {
            "desc": "Scripts de servidor - √∫tiles si corres servidores",
            "scripts": [
                ("start_local_llm_server.sh", "Servidor LLM local - √∫til si usas LLM"),
            ]
        }
    }
    
    return categories

def print_analysis():
    """Imprimir an√°lisis detallado"""
    print("\n" + "="*70)
    print("  AN√ÅLISIS DE UTILIDAD - PROYECTO EN MARCHA")
    print("="*70 + "\n")
    
    categories = categorize_by_current_utility()
    
    total_scripts = 0
    useful_count = 0
    obsolete_count = 0
    
    for cat_name, cat_data in categories.items():
        print(f"\nüìÅ {cat_name}")
        print(f"   {cat_data['desc']}")
        print("   " + "-"*66)
        
        for script_name, description in cat_data['scripts']:
            script_path = SCRIPTS_DIR / script_name
            exists = "‚úÖ" if script_path.exists() else "‚ùå"
            
            print(f"   {exists} {script_name:40} - {description}")
            total_scripts += 1
            
            if cat_name in ["√öTILES_DIARIO", "√öTILES_OCASIONAL", "TESTING", "SERVIDORES"]:
                useful_count += 1
            elif cat_name == "LEGACY_ELIMINAR":
                obsolete_count += 1
    
    return total_scripts, useful_count, obsolete_count

def generate_recommendations():
    """Generar recomendaciones espec√≠ficas"""
    print("\n" + "="*70)
    print("  RECOMENDACIONES PARA PROYECTO EN MARCHA")
    print("="*70 + "\n")
    
    print("üóëÔ∏è  ELIMINAR INMEDIATAMENTE:")
    print("   ‚Ä¢ cline_tasks.sh")
    print("   ‚Ä¢ migrate_from_cline_workflows.sh")
    print("   Raz√≥n: Legacy de Cline, ya no se usan\n")
    
    print("üì¶ MOVER A tools/maintenance/:")
    print("   ‚Ä¢ validate_structure.py")
    print("   ‚Ä¢ analyze_dead_code.py")
    print("   ‚Ä¢ workspace_cleanup.sh")
    print("   Raz√≥n: Son herramientas de mantenimiento\n")
    
    print("üì¶ MOVER A tools/deployment/:")
    print("   ‚Ä¢ enterprise_blue_green_deployment.py")
    print("   Raz√≥n: Es deployment, no script diario\n")
    
    print("üì¶ ARCHIVAR (mover a scripts/archive/):")
    print("   ‚Ä¢ initialize_ultra_fast.py")
    print("   ‚Ä¢ setup_ultra_fast.py")
    print("   ‚Ä¢ setup_llama_3_2_1b_q4.sh")
    print("   Raz√≥n: Solo necesarios en setup inicial\n")
    
    print("‚úÖ MANTENER EN scripts/:")
    print("   ‚Ä¢ activate_sheily.sh")
    print("   ‚Ä¢ ci_pipeline.sh")
    print("   ‚Ä¢ pre-commit")
    print("   ‚Ä¢ quality_gate_local.sh")
    print("   ‚Ä¢ Scripts de testing (test_*.py, test_*.sh)")
    print("   ‚Ä¢ start_local_llm_server.sh (si usas LLM)")
    print("   Raz√≥n: Uso diario/frecuente\n")

def print_quick_decision():
    """Decisi√≥n r√°pida para usuario apurado"""
    print("="*70)
    print("  RESPUESTA R√ÅPIDA")
    print("="*70 + "\n")
    
    print("‚ùì ¬øValen para algo AHORA que el proyecto est√° en marcha?\n")
    
    print("S√ç, SON √öTILES (10-12 scripts):")
    print("   ‚úÖ activate_sheily.sh - Activar entorno")
    print("   ‚úÖ ci_pipeline.sh - Validar antes de commits")
    print("   ‚úÖ pre-commit - Git hooks")
    print("   ‚úÖ quality_gate_local.sh - Control de calidad")
    print("   ‚úÖ Scripts test_* - Testing")
    print("   ‚úÖ quality_dashboard.py - Monitoreo")
    print("   ‚úÖ audit_quick.py - Auditor√≠as")
    print("\nNO, SON OBSOLETOS/INNECESARIOS (15+ scripts):")
    print("   üóëÔ∏è  cline_tasks.sh - ELIMINAR")
    print("   üóëÔ∏è  migrate_from_cline_workflows.sh - ELIMINAR")
    print("   üì¶ initialize_ultra_fast.py - Archivar (ya hecho)")
    print("   üì¶ setup_ultra_fast.py - Archivar (ya hecho)")
    print("   üì¶ advanced_*.py - Solo si desarrollas features avanzadas")
    print("   üì¶ enterprise_blue_green_deployment.py - Solo en producci√≥n")
    print("\nüí° RESUMEN: De 26 scripts, solo ~10-12 son √∫tiles regularmente")
    print("="*70 + "\n")

def main():
    print("\n" + "üîç " * 35)
    print("UTILIDAD DE SCRIPTS - PROYECTO EN MARCHA")
    print("üîç " * 35)
    
    total, useful, obsolete = print_analysis()
    generate_recommendations()
    print_quick_decision()
    
    print("="*70)
    print(f"Total scripts: {total}")
    print(f"√ötiles: ~{useful} ({useful*100//total}%)")
    print(f"Obsoletos: {obsolete}")
    print(f"Archivar/Reorganizar: {total - useful - obsolete}")
    print("="*70 + "\n")

if __name__ == "__main__":
    main()
