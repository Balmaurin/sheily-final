version: '3.8'

services:
  # Servicio principal de Sheily AI
  sheily-ai:
    build:
      context: .
      dockerfile: Dockerfile
    image: sheily-ai:latest
    container_name: sheily-ai
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - HOST=0.0.0.0
      - PORT=8000
    env_file:
      - .env
    volumes:
      # Volúmenes persistentes para modelos y logs
      - ./var/central_models:/app/var/central_models
      - ./var/central_logs:/app/var/central_logs
      - ./var/central_cache:/app/var/central_cache
      - ./logs:/app/logs
    networks:
      - sheily-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis para caché
  redis:
    image: redis:7-alpine
    container_name: sheily-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sheily-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # PostgreSQL para almacenamiento persistente
  postgres:
    image: postgres:15-alpine
    container_name: sheily-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sheily-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:latest
    container_name: sheily-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - sheily-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana para visualización
  grafana:
    image: grafana/grafana:latest
    container_name: sheily-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - sheily-network
    depends_on:
      - prometheus

networks:
  sheily-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
